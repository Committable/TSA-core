{"id": "40", "name": "SourceUnit", "layer": 0, "children": [{"id": "1", "name": "PragmaDirective", "layer": 1, "children": [], "ischanged": false, "src": "33:23"}, {"id": "39", "name": "ContractDefinition", "layer": 1, "children": [{"id": "2", "name": "StructuredDocumentation", "layer": 2, "children": [], "ischanged": false, "src": "58:750"}, {"id": "5", "name": "VariableDeclaration", "layer": 2, "children": [{"id": "3", "name": "ElementaryTypeName", "layer": 3, "children": [], "ischanged": false, "src": "1597:7"}, {"id": "4", "name": "Literal", "layer": 3, "children": [], "ischanged": false, "src": "1637:1"}], "ischanged": false, "src": "1597:41"}, {"id": "8", "name": "VariableDeclaration", "layer": 2, "children": [{"id": "6", "name": "ElementaryTypeName", "layer": 3, "children": [], "ischanged": false, "src": "1644:7"}, {"id": "7", "name": "Literal", "layer": 3, "children": [], "ischanged": false, "src": "1680:1"}], "ischanged": false, "src": "1644:37"}, {"id": "10", "name": "VariableDeclaration", "layer": 2, "children": [{"id": "9", "name": "ElementaryTypeName", "layer": 3, "children": [], "ischanged": false, "src": "1688:7"}], "ischanged": false, "src": "1688:23"}, {"id": "18", "name": "FunctionDefinition", "layer": 2, "children": [{"id": "17", "name": "Block", "layer": 3, "children": [{"id": "16", "name": "ExpressionStatement", "layer": 4, "children": [{"id": "15", "name": "Assignment", "layer": 5, "children": [{"id": "13", "name": "Identifier", "layer": 6, "children": [], "ischanged": false, "src": "1742:7"}, {"id": "14", "name": "Identifier", "layer": 6, "children": [], "ischanged": false, "src": "1752:12"}], "ischanged": false, "src": "1742:22"}], "ischanged": false, "src": "1742:22"}], "ischanged": false, "src": "1732:39"}, {"id": "11", "name": "ParameterList", "layer": 3, "children": [], "ischanged": false, "src": "1729:2"}, {"id": "12", "name": "ParameterList", "layer": 3, "children": [], "ischanged": false, "src": "1732:0"}], "ischanged": false, "src": "1718:53"}, {"id": "38", "name": "ModifierDefinition", "layer": 2, "children": [{"id": "37", "name": "Block", "layer": 3, "children": [{"id": "27", "name": "ExpressionStatement", "layer": 4, "children": [{"id": "26", "name": "FunctionCall", "layer": 5, "children": [{"id": "24", "name": "BinaryOperation", "layer": 6, "children": [{"id": "22", "name": "Identifier", "layer": 7, "children": [], "ischanged": false, "src": "2261:7"}, {"id": "23", "name": "Identifier", "layer": 7, "children": [], "ischanged": false, "src": "2272:8"}], "ischanged": false, "src": "2261:19"}, {"id": "25", "name": "Literal", "layer": 6, "children": [], "ischanged": false, "src": "2282:33"}, {"id": "21", "name": "Identifier", "layer": 6, "children": [], "ischanged": false, "src": "2253:7"}], "ischanged": false, "src": "2253:63"}], "ischanged": false, "src": "2253:63"}, {"id": "31", "name": "ExpressionStatement", "layer": 4, "children": [{"id": "30", "name": "Assignment", "layer": 5, "children": [{"id": "28", "name": "Identifier", "layer": 6, "children": [], "ischanged": false, "src": "2391:7"}, {"id": "29", "name": "Identifier", "layer": 6, "children": [], "ischanged": false, "src": "2401:8"}], "ischanged": false, "src": "2391:18"}], "ischanged": false, "src": "2391:18"}, {"id": "32", "name": "PlaceholderStatement", "layer": 4, "children": [], "ischanged": false, "src": "2420:1"}, {"id": "36", "name": "ExpressionStatement", "layer": 4, "children": [{"id": "35", "name": "Assignment", "layer": 5, "children": [{"id": "33", "name": "Identifier", "layer": 6, "children": [], "ischanged": false, "src": "2564:7"}, {"id": "34", "name": "Identifier", "layer": 6, "children": [], "ischanged": false, "src": "2574:12"}], "ischanged": false, "src": "2564:22"}], "ischanged": false, "src": "2564:22"}], "ischanged": false, "src": "2172:421"}, {"id": "19", "name": "StructuredDocumentation", "layer": 3, "children": [], "ischanged": false, "src": "1777:366"}, {"id": "20", "name": "ParameterList", "layer": 3, "children": [], "ischanged": false, "src": "2169:2"}], "ischanged": false, "src": "2148:445"}], "ischanged": false, "src": "809:1786"}], "ischanged": false, "src": "33:2563", "ast_type": "ast", "source": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"}