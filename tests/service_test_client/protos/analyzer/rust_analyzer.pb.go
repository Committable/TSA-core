// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protos/analyzer/rust_analyzer.proto

package analyzer // import "protobuf/analyzer"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RustSourceCodeAnalysisClient is the client API for RustSourceCodeAnalysis service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RustSourceCodeAnalysisClient interface {
	AnalyseSourceCode(ctx context.Context, in *SourceCodeAnalysisRequest, opts ...grpc.CallOption) (*SourceCodeAnalysisResponse, error)
}

type rustSourceCodeAnalysisClient struct {
	cc *grpc.ClientConn
}

func NewRustSourceCodeAnalysisClient(cc *grpc.ClientConn) RustSourceCodeAnalysisClient {
	return &rustSourceCodeAnalysisClient{cc}
}

func (c *rustSourceCodeAnalysisClient) AnalyseSourceCode(ctx context.Context, in *SourceCodeAnalysisRequest, opts ...grpc.CallOption) (*SourceCodeAnalysisResponse, error) {
	out := new(SourceCodeAnalysisResponse)
	err := c.cc.Invoke(ctx, "/analyzer.RustSourceCodeAnalysis/AnalyseSourceCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RustSourceCodeAnalysisServer is the server API for RustSourceCodeAnalysis service.
type RustSourceCodeAnalysisServer interface {
	AnalyseSourceCode(context.Context, *SourceCodeAnalysisRequest) (*SourceCodeAnalysisResponse, error)
}

func RegisterRustSourceCodeAnalysisServer(s *grpc.Server, srv RustSourceCodeAnalysisServer) {
	s.RegisterService(&_RustSourceCodeAnalysis_serviceDesc, srv)
}

func _RustSourceCodeAnalysis_AnalyseSourceCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SourceCodeAnalysisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RustSourceCodeAnalysisServer).AnalyseSourceCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/analyzer.RustSourceCodeAnalysis/AnalyseSourceCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RustSourceCodeAnalysisServer).AnalyseSourceCode(ctx, req.(*SourceCodeAnalysisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RustSourceCodeAnalysis_serviceDesc = grpc.ServiceDesc{
	ServiceName: "analyzer.RustSourceCodeAnalysis",
	HandlerType: (*RustSourceCodeAnalysisServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AnalyseSourceCode",
			Handler:    _RustSourceCodeAnalysis_AnalyseSourceCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/analyzer/rust_analyzer.proto",
}

func init() {
	proto.RegisterFile("protos/analyzer/rust_analyzer.proto", fileDescriptor_rust_analyzer_b721a8746d0b2dd5)
}

var fileDescriptor_rust_analyzer_b721a8746d0b2dd5 = []byte{
	// 146 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x2e, 0x28, 0xca, 0x2f,
	0xc9, 0x2f, 0xd6, 0x4f, 0xcc, 0x4b, 0xcc, 0xa9, 0xac, 0x4a, 0x2d, 0xd2, 0x2f, 0x2a, 0x2d, 0x2e,
	0x89, 0x87, 0xf1, 0xf4, 0xc0, 0xb2, 0x42, 0x1c, 0x30, 0xbe, 0x94, 0x16, 0xba, 0xf2, 0xe2, 0xfc,
	0xd2, 0xa2, 0xe4, 0xd4, 0xf8, 0xe4, 0xfc, 0x94, 0x54, 0x34, 0x5d, 0x46, 0x15, 0x5c, 0x62, 0x41,
	0xa5, 0xc5, 0x25, 0xc1, 0x60, 0x15, 0xce, 0xf9, 0x29, 0xa9, 0x8e, 0x20, 0xf9, 0xe2, 0xcc, 0x62,
	0xa1, 0x38, 0x2e, 0x41, 0x08, 0x3b, 0x15, 0x21, 0x29, 0xa4, 0xac, 0x07, 0xd7, 0x8f, 0xa9, 0x25,
	0x28, 0xb5, 0xb0, 0x34, 0xb5, 0xb8, 0x44, 0x4a, 0x05, 0xbf, 0xa2, 0xe2, 0x82, 0xfc, 0xbc, 0xe2,
	0x54, 0x27, 0x99, 0x28, 0x29, 0xb0, 0x13, 0x92, 0x4a, 0xd3, 0xe0, 0x2e, 0xb5, 0x86, 0x31, 0x92,
	0xd8, 0xc0, 0x72, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd7, 0xae, 0xe2, 0x76, 0xfb, 0x00,
	0x00, 0x00,
}
