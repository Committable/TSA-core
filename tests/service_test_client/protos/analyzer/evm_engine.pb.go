// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protos/analyzer/evm_engine.proto

package analyzer // import "protobuf/analyzer"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EVMEngineClient is the client API for EVMEngine service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EVMEngineClient interface {
	AnalyseByteCode(ctx context.Context, in *ByteCodeAnalysisRequest, opts ...grpc.CallOption) (*ByteCodeAnalysisResponse, error)
}

type eVMEngineClient struct {
	cc *grpc.ClientConn
}

func NewEVMEngineClient(cc *grpc.ClientConn) EVMEngineClient {
	return &eVMEngineClient{cc}
}

func (c *eVMEngineClient) AnalyseByteCode(ctx context.Context, in *ByteCodeAnalysisRequest, opts ...grpc.CallOption) (*ByteCodeAnalysisResponse, error) {
	out := new(ByteCodeAnalysisResponse)
	err := c.cc.Invoke(ctx, "/analyzer.EVMEngine/AnalyseByteCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EVMEngineServer is the server API for EVMEngine service.
type EVMEngineServer interface {
	AnalyseByteCode(context.Context, *ByteCodeAnalysisRequest) (*ByteCodeAnalysisResponse, error)
}

func RegisterEVMEngineServer(s *grpc.Server, srv EVMEngineServer) {
	s.RegisterService(&_EVMEngine_serviceDesc, srv)
}

func _EVMEngine_AnalyseByteCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByteCodeAnalysisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EVMEngineServer).AnalyseByteCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/analyzer.EVMEngine/AnalyseByteCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EVMEngineServer).AnalyseByteCode(ctx, req.(*ByteCodeAnalysisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EVMEngine_serviceDesc = grpc.ServiceDesc{
	ServiceName: "analyzer.EVMEngine",
	HandlerType: (*EVMEngineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AnalyseByteCode",
			Handler:    _EVMEngine_AnalyseByteCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/analyzer/evm_engine.proto",
}

func init() {
	proto.RegisterFile("protos/analyzer/evm_engine.proto", fileDescriptor_evm_engine_07240ae918b68e57)
}

var fileDescriptor_evm_engine_07240ae918b68e57 = []byte{
	// 150 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x28, 0x28, 0xca, 0x2f,
	0xc9, 0x2f, 0xd6, 0x4f, 0xcc, 0x4b, 0xcc, 0xa9, 0xac, 0x4a, 0x2d, 0xd2, 0x4f, 0x2d, 0xcb, 0x8d,
	0x4f, 0xcd, 0x4b, 0xcf, 0xcc, 0x4b, 0xd5, 0x03, 0x4b, 0x09, 0x71, 0xc0, 0xa4, 0xa4, 0xd4, 0xd1,
	0xd5, 0x26, 0x55, 0x96, 0xa4, 0x26, 0xe7, 0xa7, 0xa4, 0xc6, 0xc3, 0x44, 0x20, 0x5a, 0x8c, 0x52,
	0xb9, 0x38, 0x5d, 0xc3, 0x7c, 0x5d, 0xc1, 0xa6, 0x08, 0x45, 0x70, 0xf1, 0x3b, 0x82, 0xa4, 0x8b,
	0x53, 0x9d, 0x2a, 0x4b, 0x52, 0x9d, 0xf3, 0x53, 0x52, 0x85, 0x14, 0xf5, 0xe0, 0x1a, 0x60, 0x62,
	0x10, 0x25, 0x99, 0xc5, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x52, 0x4a, 0xf8, 0x94, 0x14,
	0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x3a, 0xc9, 0x44, 0x49, 0x81, 0xed, 0x4b, 0x2a, 0x4d, 0x83, 0xbb,
	0xc9, 0x1a, 0xc6, 0x48, 0x62, 0x03, 0xcb, 0x19, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x27, 0xf5,
	0x2a, 0x55, 0xe2, 0x00, 0x00, 0x00,
}
