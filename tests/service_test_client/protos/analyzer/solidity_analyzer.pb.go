// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protos/analyzer/solidity_analyzer.proto

package analyzer // import "protobuf/analyzer"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SoliditySourceCodeAnalysisClient is the client API for SoliditySourceCodeAnalysis service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SoliditySourceCodeAnalysisClient interface {
	AnalyseSourceCode(ctx context.Context, in *SourceCodeAnalysisRequest, opts ...grpc.CallOption) (*SourceCodeAnalysisResponse, error)
}

type soliditySourceCodeAnalysisClient struct {
	cc *grpc.ClientConn
}

func NewSoliditySourceCodeAnalysisClient(cc *grpc.ClientConn) SoliditySourceCodeAnalysisClient {
	return &soliditySourceCodeAnalysisClient{cc}
}

func (c *soliditySourceCodeAnalysisClient) AnalyseSourceCode(ctx context.Context, in *SourceCodeAnalysisRequest, opts ...grpc.CallOption) (*SourceCodeAnalysisResponse, error) {
	out := new(SourceCodeAnalysisResponse)
	err := c.cc.Invoke(ctx, "/analyzer.SoliditySourceCodeAnalysis/AnalyseSourceCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SoliditySourceCodeAnalysisServer is the server API for SoliditySourceCodeAnalysis service.
type SoliditySourceCodeAnalysisServer interface {
	AnalyseSourceCode(context.Context, *SourceCodeAnalysisRequest) (*SourceCodeAnalysisResponse, error)
}

func RegisterSoliditySourceCodeAnalysisServer(s *grpc.Server, srv SoliditySourceCodeAnalysisServer) {
	s.RegisterService(&_SoliditySourceCodeAnalysis_serviceDesc, srv)
}

func _SoliditySourceCodeAnalysis_AnalyseSourceCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SourceCodeAnalysisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoliditySourceCodeAnalysisServer).AnalyseSourceCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/analyzer.SoliditySourceCodeAnalysis/AnalyseSourceCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoliditySourceCodeAnalysisServer).AnalyseSourceCode(ctx, req.(*SourceCodeAnalysisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SoliditySourceCodeAnalysis_serviceDesc = grpc.ServiceDesc{
	ServiceName: "analyzer.SoliditySourceCodeAnalysis",
	HandlerType: (*SoliditySourceCodeAnalysisServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AnalyseSourceCode",
			Handler:    _SoliditySourceCodeAnalysis_AnalyseSourceCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/analyzer/solidity_analyzer.proto",
}

func init() {
	proto.RegisterFile("protos/analyzer/solidity_analyzer.proto", fileDescriptor_solidity_analyzer_9d1e88921a6ed2a7)
}

var fileDescriptor_solidity_analyzer_9d1e88921a6ed2a7 = []byte{
	// 147 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x2f, 0x28, 0xca, 0x2f,
	0xc9, 0x2f, 0xd6, 0x4f, 0xcc, 0x4b, 0xcc, 0xa9, 0xac, 0x4a, 0x2d, 0xd2, 0x2f, 0xce, 0xcf, 0xc9,
	0x4c, 0xc9, 0x2c, 0xa9, 0x8c, 0x87, 0x89, 0xe8, 0x81, 0x55, 0x08, 0x71, 0xc0, 0xf8, 0x52, 0x5a,
	0x98, 0x5a, 0x4a, 0x8b, 0x92, 0x53, 0xe3, 0x93, 0xf3, 0x53, 0x52, 0xd1, 0x74, 0x19, 0xd5, 0x70,
	0x49, 0x05, 0x43, 0x0d, 0x0c, 0x06, 0xab, 0x72, 0xce, 0x4f, 0x49, 0x75, 0x04, 0xa9, 0x29, 0xce,
	0x2c, 0x16, 0x8a, 0xe3, 0x12, 0x84, 0xb0, 0x53, 0x11, 0x92, 0x42, 0xca, 0x7a, 0x70, 0x33, 0x30,
	0xb5, 0x04, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x48, 0xa9, 0xe0, 0x57, 0x54, 0x5c, 0x90, 0x9f,
	0x57, 0x9c, 0xea, 0x24, 0x13, 0x25, 0x05, 0x76, 0x46, 0x52, 0x69, 0x1a, 0xdc, 0xb5, 0xd6, 0x30,
	0x46, 0x12, 0x1b, 0x58, 0xce, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x97, 0x4e, 0xb9, 0x82, 0x03,
	0x01, 0x00, 0x00,
}
